# This file was *autogenerated* from the file find_bound_data.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_1p0 = RealNumber('1.0'); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_2p0 = RealNumber('2.0')
import sys
from csv import reader, writer
load('MCs.sage')

def import_params(directory, sffx):
	"""
	Imports the rows of parameters
	"""
	params_list = []
	param_file = open('%sparams_%i.csv' % (directory, sffx), 'r')
	rdr = reader(param_file)
	for row in rdr:
		params_list.append(row)
	param_file.close()
	return params_list

def import_done_data(directory):
	"""
	Imports the rows of parameters
	"""
	done_list = []
	done_file = open('%sbound_data.csv' % directory, 'r')
	rdr = reader(done_file)
	for row in rdr:
		prow = [str(Rational(eval(row[_sage_const_4 ]))), str(Rational(eval(row[_sage_const_5 ]))), str(Rational(eval(row[_sage_const_2 ]))), str(Rational(eval(row[_sage_const_3 ]))), str((eval(row[_sage_const_6 ]), eval(row[_sage_const_7 ]))), str((eval(row[_sage_const_8 ]), eval(row[_sage_const_9 ]))), str(Rational(eval(row[_sage_const_0 ]))), str(Rational(eval(row[_sage_const_1 ])))]
		done_list.append(prow)
	done_file.close()
	return done_list

def check_whats_done(directory, params_list):
	"""
	Check which parameters have already been done
	"""
	not_done = []
	done_list = import_done_data(directory)
	for row in params_list:
		if row not in done_list:
			not_done.append(row)
	return not_done

def append_row_to_csv_file(row, directory):
	"""
	Appends row to csv file
	"""
	results_file = open('%sbound_data.csv' % directory, 'a')
	csv_wrtr = writer(results_file, delimiter=',')
	csv_wrtr.writerow(row)
	results_file.close()

def calculate_row(params):
	"""
	Calculates the row to write
	"""
	n1, n2 = Rational(params[_sage_const_0 ]), Rational(params[_sage_const_1 ])
	mu1, mu2 = Rational(params[_sage_const_2 ]), Rational(params[_sage_const_3 ])
	r11, r12, r21, r22 = Rational(eval(params[_sage_const_4 ])[_sage_const_0 ]), Rational(eval(params[_sage_const_4 ])[_sage_const_1 ]), Rational(eval(params[_sage_const_5 ])[_sage_const_0 ]), Rational(eval(params[_sage_const_5 ])[_sage_const_1 ])
	L1, L2 = Rational(params[_sage_const_6 ]), Rational(params[_sage_const_7 ])
	mu1_dash = (mu2/(mu1+mu2))/((_sage_const_2p0 /mu1)+(_sage_const_1p0 /mu2))
	mu2_dash = (mu1/(mu2+mu1))/((_sage_const_1p0 /mu1)+(_sage_const_2p0 /mu2))

	Q11_s = OneNodeNetwork(n1, mu1, r11, L1)
	Q11_s.find_mean_time_to_absorbtion()
	Q11_ss = OneNodeNetwork(n1, mu1_dash, r11, L1)
	Q11_ss.find_mean_time_to_absorbtion()
	Q12_s = OneNodeNetwork(n2, mu2, r22, L2)
	Q12_s.find_mean_time_to_absorbtion()
	Q12_ss = OneNodeNetwork(n2, mu2_dash, r22, L2)
	Q12_ss.find_mean_time_to_absorbtion()
	Q2 = TwoNodeSimpleNetwork(n1, n2, mu1, mu2, r12, r21, L1, L2)
	Q2.find_mean_time_to_absorbtion()
	Q = TwoNodeFeedbackNetwork(n1, n2, mu1, mu2, r11, r12, r21, r22, L1, L2)
	Q.find_mean_time_to_absorbtion()

	return [float(L1), float(L2), float(mu1), float(mu2), int(n1), int(n2), float(r11), float(r12), float(r21), float(r22), Q11_ss.mean_time_to_absorbtion['0'], Q11_s.mean_time_to_absorbtion['0'], Q12_ss.mean_time_to_absorbtion['0'], Q12_s.mean_time_to_absorbtion['0'], Q2.mean_time_to_absorbtion['(0, 0)'], Q.mean_time_to_absorbtion['(0, 0)']]

@ parallel
def find_bound_data(param_list, directory):
	"""
	Main function that goes through all parameter combinations and writes the row to csv file
	"""
	row = calculate_row(param_list)
	append_row_to_csv_file(row, directory)
	return None

if __name__ == '__main__':
	arguments = sys.argv
	directory = arguments[_sage_const_1 ]
	sffx = int(arguments[_sage_const_2 ])
	import_list = import_params(directory, sffx)
	param_list = check_whats_done(directory, import_list)
	parallel_data = find_bound_data([(p, directory) for p in param_list])
	for obs in parallel_data:
		dummy = obs
